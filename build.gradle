buildscript {
	ext {
		springBootVersion = '1.5.4.RELEASE'
        assertjVersion = '3.8.0'
        catchexceptionVersion = '1.4.4'
        webjarsbootstrap = '3.3.7'
        webjarsfontawesome = '4.7.0'
        webjarsbootstrapsocial = '5.0.0'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: "jacoco" 
apply plugin: 'org.springframework.boot'

jar {
	baseName = 'vida-sushi'
	version = '0.1.0'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	mavenLocal()
}


// Integration test 
	
sourceSets {
    integrationTest {
        java {
        	srcDir 'src/integrationtest/java'
        }
    }
}

dependencies {
	integrationTestCompile sourceSets.main.output
	integrationTestCompile sourceSets.test.output
	integrationTestCompile configurations.testCompile
	integrationTestRuntime configurations.testRuntime
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest
integrationTest.testLogging.showStandardStreams = true
	
// FIN Integration test 

// Location sources

eclipse {
    classpath {
        file {
            whenMerged { 
                def lib = entries.find { it.path.contains 'elipcero-springdatarest-0.1.0.jar' }
                lib.javadocPath = fileReference(file('build/libs/SpringDataRest-javadoc.jar'))
                lib.sourcePath = fileReference(file('build/libs/SpringDataRest-sources.jar'))
            }
        }
    }
}

// FIN Location sources

dependencies {
	compileOnly('org.projectlombok:lombok')
	
	compile("org.webjars:bootstrap:${webjarsbootstrap}")
	compile("org.webjars:font-awesome:${webjarsfontawesome}")
	compile("org.webjars.bower:bootstrap-social:${webjarsbootstrapsocial}")
	
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.security.oauth:spring-security-oauth2')
	compile('org.springframework.boot:spring-boot-configuration-processor')	
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	
	compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
	
	compile('com.elipcero.springsecurity:elipcero-springsecurity:0.1.0')
	compile('com.elipcero.springdata:elipcero-springdata:0.1.0')
	compile('com.elipcero.springdatarest:elipcero-springdatarest:0.1.0')
	
    testCompile("org.assertj:assertj-core:${assertjVersion}")
    testCompile("eu.codearte.catch-exception:catch-exception:${catchexceptionVersion}")	
	
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('com.elipcero.springtest:elipcero-springtest:0.1.0')
}
